<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL MAP 2.0//EN"
"http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="employee">
	<insert id="insert" parameterClass="prime.admin.employee.EmployeeBean">
		INSERT INTO EMPLOYEES
		(UPDATED_BY, PROFILE_PICTURE, EMPLOYEE_ID , EMPLOYEE_NAME, ADDRESS, CONTACT_NUMBER, EMAIL,
		 BIRTHDATE, GENDER, HIRE_DATE, DIVISION_ID, POSITION_ID,
		 HEAD_ID,TREE_ID) VALUES 
		(#updateBy#, #filePic#, #employeeId#, #employeeName#, #address#, #contactNumber#, #email#, #birthdate#, 
		 #gender#, #hireDate#, 
		<isEqual property="divisionId" compareValue="0">
			null
		</isEqual>
		<isNotEqual property="divisionId" compareValue="0">
			#divisionId#
		</isNotEqual>
		 , #positionId#, 
		 <isEqual property="managerId" compareValue="0">
			null,
		</isEqual>
		<isNotEqual property="managerId" compareValue="0">
			#managerId#,
		</isNotEqual>
		<isEqual property="managerId" compareValue="0">
			#employeeId#
		</isEqual>
		<isNotEqual property="managerId" compareValue="0">
			#treeId#
		</isNotEqual>
		 )
	</insert>
	
	<insert id="insertResign" parameterClass="prime.admin.employee.EmployeeBean">
		INSERT INTO RESIGN_EMPLOYEES
		(EMPLOYEE_ID , RESIGN_DATE, RESIGN_NOTE, UPDATED_BY) VALUES 
		(#employeeId#, #resignDate#, #resignNote#, #updateBy#)
	</insert>
	
	<insert id="insertWeekend" parameterClass="prime.admin.employee.EmployeeBean">
		INSERT INTO WEEKEND_HOLIDAYS
		(EMPLOYEE_ID , START_FROM, WEEKEND, WEEKEND_NOTE, UPDATED_BY) VALUES 
		(#employeeId#, #startFrom#, #weekEnd#,#descriptionWeekEnd#, #updateBy#)
	</insert>
	
	<update id="updateWeekend" parameterClass="prime.admin.employee.EmployeeBean">
		UPDATE WEEKEND_HOLIDAYS SET
			WEEKEND=#weekEnd#,
			WEEKEND_NOTE=#descriptionWeekEnd#,
			UPDATED_BY = #updateBy#
		WHERE EMPLOYEE_ID=#employeeId# AND START_FROM = #startFrom#
	</update>
	
	<delete id="deleteWeekEnd" parameterClass="java.util.Map">
		DELETE FROM WEEKEND_HOLIDAYS
		WHERE EMPLOYEE_ID=#id# AND TO_CHAR(START_FROM, 'yyyy-mm-dd') = #startFrom#
	</delete>
	
	<insert id="insertDayoff" parameterClass="prime.admin.employee.EmployeeBean">
		INSERT INTO DAY_OFFS
		(EMPLOYEE_ID , DAYOFF_START_DATE, DAYOFF_END_DATE, DAYOFF_NOTE, UPDATED_BY) VALUES 
		(#employeeId#, #startDate#, #endDate#,#descriptionDayOff#, #updateBy#)
	</insert>
	
	<delete id="deleteDayOff" parameterClass="java.util.Map">
		DELETE FROM DAY_OFFS
		WHERE EMPLOYEE_ID=#id# AND TO_CHAR(DAYOFF_START_DATE, 'yyyy-mm-dd') = #startDate#
	</delete>
	
	<update id="update" parameterClass="prime.admin.employee.EmployeeBean">
		UPDATE EMPLOYEES SET
		EMPLOYEE_NAME=#employeeName#,
		ADDRESS=#address#,
		CONTACT_NUMBER=#contactNumber#,
		EMAIL=#email#,
		BIRTHDATE=#birthdate#,
		GENDER=#gender#,
		HIRE_DATE=#hireDate#,
		UPDATED_BY = #updateBy#
		WHERE EMPLOYEE_ID=#employeeId#
	</update>
	
	<update id="updateChangePic" parameterClass="java.util.Map">
		UPDATE EMPLOYEES SET
		PROFILE_PICTURE=#filePic#,
		UPDATED_BY = #updateBy#
		WHERE EMPLOYEE_ID=#id#
	</update>
	
	<update id="updatePositionDivision" parameterClass="prime.admin.employee.EmployeeBean">
		UPDATE EMPLOYEES SET
		<isEqual property="divisionId" compareValue="0">
			DIVISION_ID=NULL,
		</isEqual>
		<isNotEqual property="divisionId" compareValue="0">
			DIVISION_ID=#divisionId#,
		</isNotEqual>
		POSITION_ID=#positionId#,
		<isNotEqual property="managerId"  compareValue="0">
			HEAD_ID=#managerId#,
		</isNotEqual>
		<isEqual property="managerId"  compareValue="0">
			HEAD_ID=null,
		</isEqual>
		TREE_ID=#treeId#,
		UPDATED_BY = #updateBy#
		WHERE EMPLOYEE_ID=#employeeId#
	</update>
	
	<update id="updateHead" parameterClass="java.util.Map">
		UPDATE EMPLOYEES SET
		HEAD_ID=#newHead#,
		UPDATED_BY = #updateBy#
		WHERE HEAD_ID=#forCondition#
	</update>
	
	<select id="getNewId" resultClass="java.lang.Integer">
		SELECT NVL(MAX(EMPLOYEE_ID)+1, 1) FROM EMPLOYEES
	</select>
	
	<select id="get"  resultClass="prime.admin.employee.EmployeeBean" parameterClass="java.lang.Integer">
		SELECT 
	        EMP.EMPLOYEE_ID AS employeeId, 
	        EMP.EMPLOYEE_NAME AS employeeName,
	        GENDER AS gender,
	        ADDRESS AS address,
	        BIRTHDATE AS birthdate,
	        HIRE_DATE AS hireDate,
	        CONTACT_NUMBER AS contactNumber,
	        EMAIL AS email,
	        PROFILE_PICTURE AS filePic, 
	        DIV.DIVISION_ID AS divisionId,
	        DIV.DIVISION_NAME AS divisionName,
	        POS.POSITION_ID AS positionId,
	        POS.POSITION_LEVEL AS positionLevel,
	        POS.POSITION_NAME AS positionName,
	        MANAGER.EMPLOYEE_ID AS managerId,
	        MANAGER.EMPLOYEE_NAME AS managerName,
	        MANAGER.DIVISION_ID AS managerDivisionId, 
	        MANAGER.TREE_ID AS managerTreeId,
	        RE.RESIGN_DATE AS resignDate,
	        RE.RESIGN_NOTE AS resignNote,
	        EMP.TREE_ID AS treeId 
        FROM EMPLOYEES EMP 
        LEFT JOIN DIVISIONS DIV ON DIV.DIVISION_ID = EMP.DIVISION_ID
        JOIN POSITIONS POS ON POS.POSITION_ID = EMP.POSITION_ID
        LEFT JOIN (
        	SELECT EMPLOYEE_ID, EMPLOYEE_NAME,DIVISION_ID,TREE_ID FROM EMPLOYEES
        ) MANAGER ON MANAGER.EMPLOYEE_ID = EMP.HEAD_ID
        LEFT JOIN (
		    SELECT EMPLOYEE_ID, RESIGN_DATE, RESIGN_NOTE FROM RESIGN_EMPLOYEES
		)RE ON RE.EMPLOYEE_ID = EMP.EMPLOYEE_ID
        WHERE EMP.EMPLOYEE_ID=#id#
	</select>
	
	<select id="getWeekend"  resultClass="prime.admin.employee.EmployeeBean" parameterClass="java.lang.Integer">
		SELECT 
	        START_FROM AS startFrom,
	        WEEKEND AS weekEnd,
	        WEEKEND_NOTE AS descriptionWeekEnd
	    FROM WEEKEND_HOLIDAYS WH 
        WHERE WH.EMPLOYEE_ID=#id#
	</select>
	
	<select id="getValidateWeekEnd"  resultClass="java.lang.Integer" parameterClass="java.util.Map">
		SELECT COUNT(0) FROM WEEKEND_HOLIDAYS
		WHERE START_FROM >= TO_DATE(#startFrom#,'dd/mm/yyyy') AND EMPLOYEE_ID=#empId#
	</select>
	
	<select id="getEmployeeWeekendByIdAndStartFrom"  resultClass="prime.admin.employee.EmployeeBean" parameterClass="java.util.Map">
		SELECT 
	        START_FROM AS startFrom,
	        WEEKEND AS weekEnd,
	        WEEKEND_NOTE AS descriptionWeekEnd,
	        EMP.EMPLOYEE_ID AS employeeId,
	        EMPLOYEE_NAME AS employeeName
        FROM WEEKEND_HOLIDAYS WH 
        JOIN EMPLOYEES EMP ON WH.EMPLOYEE_ID = EMP.EMPLOYEE_ID
        WHERE WH.EMPLOYEE_ID=#id# AND TO_CHAR(WH.START_FROM, 'yyyy-mm-dd') = #startFrom#
	</select>
	
	<select id="getDayoff"  resultClass="prime.admin.employee.EmployeeBean" parameterClass="java.lang.Integer">
		SELECT 
	        DAYOFF_START_DATE AS startDate,
	        DAYOFF_END_DATE AS endDate,
	        DAYOFF_NOTE as descriptionDayOff
        FROM DAY_OFFS DO 
        WHERE DO.EMPLOYEE_ID=#id#
	</select>
	
	<select id="getValidateDayOff"  resultClass="java.lang.Integer" parameterClass="java.util.Map">
		SELECT COUNT(0) FROM DAY_OFFS WHERE 
		((DAYOFF_START_DATE <![CDATA[ >= ]]> #startDate# AND DAYOFF_END_DATE <![CDATA[ <=]]> #endDate#) OR 
		(DAYOFF_START_DATE <![CDATA[ >= ]]> #startDate# AND DAYOFF_START_DATE <![CDATA[ <= ]]> #endDate#) OR
		(DAYOFF_END_DATE <![CDATA[ >= ]]> #startDate# AND DAYOFF_END_DATE <![CDATA[ <= ]]> #endDate#) OR
		(DAYOFF_START_DATE <![CDATA[ <= ]]> #startDate# AND DAYOFF_END_DATE <![CDATA[ >= ]]>#endDate#))
		AND EMPLOYEE_ID=#empId#
	</select>
	
	<select id="getListByColumn" resultClass="prime.admin.employee.EmployeeBean" parameterClass="java.util.Map">
		SELECT * FROM  (SELECT page.*, ROWNUM rnum FROM 
		(SELECT 
		    EMP.EMPLOYEE_ID AS employeeId, 
		    EMP.EMPLOYEE_NAME AS employeeName,
		    GENDER AS gender,
		    ADDRESS AS address,
		    BIRTHDATE AS birthdate,
		    HIRE_DATE AS hireDate,
		    CONTACT_NUMBER AS contactNumber,
		    EMAIL AS email,
		    DIVISION_NAME AS divisionName,
		    POSITION_NAME AS positionName,
		    MANAGER.EMPLOYEE_NAME AS managerName,
		    RE.RESIGN_DATE AS resignDate
		FROM EMPLOYEES EMP 
		LEFT JOIN DIVISIONS DIV ON DIV.DIVISION_ID = EMP.DIVISION_ID
		JOIN POSITIONS POS ON POS.POSITION_ID = EMP.POSITION_ID
		LEFT JOIN (
		    SELECT E.EMPLOYEE_ID, E.EMPLOYEE_NAME FROM EMPLOYEES E
		) MANAGER ON MANAGER.EMPLOYEE_ID = EMP.HEAD_ID
		LEFT JOIN (
		    SELECT EMPLOYEE_ID, RESIGN_DATE FROM RESIGN_EMPLOYEES
		)RE ON RE.EMPLOYEE_ID = EMP.EMPLOYEE_ID
	    <dynamic prepend="WHERE">
	        <isNotNull property="columnSearch">
	        	<isEqual property="columnSearch" compareValue="ID">
			          UPPER(EMP.EMPLOYEE_ID) LIKE UPPER(#value#)
				</isEqual>
		       	<isEqual property="columnSearch" compareValue="NAME">
			          UPPER(EMP.EMPLOYEE_NAME) LIKE UPPER('%'||#value#||'%')
				</isEqual> 
				<isEqual property="columnSearch" compareValue="GENDER">
			          UPPER(EMP.GENDER) = #value#
				</isEqual> 
				<isEqual property="columnSearch" compareValue="EMAIL">
			          UPPER(EMP.EMAIL) LIKE UPPER('%'||#value#||'%')
				</isEqual> 
				<isEqual property="columnSearch" compareValue="DIVISION">
			          UPPER(DIVISION_NAME) LIKE UPPER('%'||#value#||'%')
				</isEqual> 
				<isEqual property="columnSearch" compareValue="POSITION">
			          UPPER(POSITION_NAME) LIKE UPPER('%'||#value#||'%')
				</isEqual> 
				<isEqual property="columnSearch" compareValue="MANAGER">
			          UPPER(MANAGER.EMPLOYEE_NAME) LIKE UPPER('%'||#value#||'%')
				</isEqual> 
				<isEqual property="columnSearch" compareValue="STATUS">
			           (CASE 
				            WHEN NVL(TO_CHAR(RE.RESIGN_DATE, 'yyyy-mm-dd'), '0') = '0' THEN 0
				            ELSE 1
				        END) = #value#
				</isEqual> 
	        </isNotNull>
	    </dynamic>
	    ORDER BY EMP.EMPLOYEE_ID ASC) page 
	    WHERE ROWNUM <![CDATA[ <= ]]> #endRow#) WHERE rnum <![CDATA[ >= ]]> #startRow#
	</select>
	
	<select id="getCountByColumn" resultClass="java.lang.Integer" parameterClass="java.util.Map">
		SELECT COUNT(1) 
		FROM EMPLOYEES EMP 
		LEFT JOIN DIVISIONS DIV ON DIV.DIVISION_ID = EMP.DIVISION_ID
		JOIN POSITIONS POS ON POS.POSITION_ID = EMP.POSITION_ID
		LEFT JOIN (
		    SELECT E.EMPLOYEE_ID, E.EMPLOYEE_NAME FROM EMPLOYEES E
		) MANAGER ON MANAGER.EMPLOYEE_ID = EMP.HEAD_ID
		LEFT JOIN (	
		    SELECT EMPLOYEE_ID, RESIGN_DATE FROM RESIGN_EMPLOYEES
		)RE ON RE.EMPLOYEE_ID = EMP.EMPLOYEE_ID
	    <dynamic prepend="WHERE">
	        <isNotNull property="columnSearch">
		       	<isEqual property="columnSearch" compareValue="ID">
			          UPPER(EMP.EMPLOYEE_ID) LIKE UPPER(#value#)
				</isEqual>
		       	<isEqual property="columnSearch" compareValue="NAME">
			          UPPER(EMP.EMPLOYEE_NAME) LIKE UPPER('%'||#value#||'%')
				</isEqual>
				<isEqual property="columnSearch" compareValue="GENDER">
			          UPPER(GENDER) = #value#
				</isEqual> 
				<isEqual property="columnSearch" compareValue="EMAIL">
			          UPPER(EMAIL) LIKE UPPER('%'||#value#||'%')
				</isEqual> 
				<isEqual property="columnSearch" compareValue="DIVISION">
			          UPPER(DIVISION_NAME) LIKE UPPER('%'||#value#||'%')
				</isEqual> 
				<isEqual property="columnSearch" compareValue="POSITION">
			          UPPER(POSITION_NAME) LIKE UPPER('%'||#value#||'%')
				</isEqual> 
				<isEqual property="columnSearch" compareValue="MANAGER">
			          UPPER(MANAGER.EMPLOYEE_NAME) LIKE UPPER('%'||#value#||'%')
				</isEqual>
				<isEqual property="columnSearch" compareValue="STATUS">
			           (CASE 
				            WHEN NVL(TO_CHAR(RE.RESIGN_DATE, 'yyyy-mm-dd'), '0') = '0' THEN 0
				            ELSE 1
				        END) = #value#
				</isEqual> 
	        </isNotNull>
	    </dynamic>
	</select>

	
	<select id="getCountByColumnEmployeeHead" resultClass="java.lang.Integer" parameterClass="java.util.Map">
		SELECT COUNT(1) 
		FROM EMPLOYEES EMP
		LEFT JOIN DIVISIONS DIV ON DIV.DIVISION_ID = EMP.DIVISION_ID
		JOIN POSITIONS POS ON POS.POSITION_ID = EMP.POSITION_ID
		LEFT JOIN (
		    SELECT E.EMPLOYEE_ID, E.EMPLOYEE_NAME FROM EMPLOYEES E
		) MANAGER ON MANAGER.EMPLOYEE_ID = EMP.HEAD_ID
		WHERE EMP.EMPLOYEE_ID NOT IN (SELECT EMPLOYEE_ID FROM RESIGN_EMPLOYEES)
		<dynamic prepend="AND">
	        <isEqual property="paramCondition" compareValue="employeeAdd">
				POS.POSITION_LEVEL <![CDATA[ < ]]> #positionLevel#
			</isEqual>
			<isEqual property="paramCondition" compareValue="employeeEditPosDiv">
				POS.POSITION_LEVEL <![CDATA[ < ]]> #positionLevel# AND EMP.EMPLOYEE_ID != #employeeId# 
			</isEqual>
			<isEqual property="paramCondition" compareValue="employeeResign">
				POS.POSITION_LEVEL <![CDATA[ <= ]]> #positionLevel#  AND EMP.EMPLOYEE_ID != #employeeId# AND (EMP.DIVISION_ID = $divisionId$ OR EMP.DIVISION_ID IS NULL)
			</isEqual>
		</dynamic>
	    <dynamic prepend="AND">
	        <isNotNull property="columnSearch">
		       	<isEqual property="columnSearch" compareValue="ID">
			          UPPER(EMP.EMPLOYEE_ID) LIKE UPPER(#value#)
				</isEqual>
		       	<isEqual property="columnSearch" compareValue="NAME">
			          UPPER(EMP.EMPLOYEE_NAME) LIKE UPPER('%'||#value#||'%')
				</isEqual> 
				<isEqual property="columnSearch" compareValue="GENDER">
			          UPPER(EMP.GENDER) LIKE #value#
				</isEqual> 
				<isEqual property="columnSearch" compareValue="EMAIL">
			          UPPER(EMP.EMAIL) LIKE UPPER('%'||#value#||'%')
				</isEqual> 
				<isEqual property="columnSearch" compareValue="DIVISION">
			          UPPER(DIVISION_NAME) LIKE UPPER('%'||#value#||'%')
				</isEqual> 
				<isEqual property="columnSearch" compareValue="POSITION">
			          UPPER(POSITION_NAME) LIKE UPPER('%'||#value#||'%')
				</isEqual> 
				<isEqual property="columnSearch" compareValue="MANAGER">
			          UPPER(MANAGER.EMPLOYEE_NAME) LIKE UPPER('%'||#value#||'%')
				</isEqual> 
	        </isNotNull>
	    </dynamic>
	</select>
	
	<select id="getListEmployeeHead" resultClass="prime.admin.employee.EmployeeBean" parameterClass="java.util.Map">
		SELECT * FROM  (SELECT page.*, ROWNUM rnum FROM 
		(SELECT 
		    EMP.EMPLOYEE_ID AS employeeId, 
		    EMP.EMPLOYEE_NAME AS employeeName,
		    GENDER AS gender,
		    ADDRESS AS address,
		    BIRTHDATE AS birthdate,
		    HIRE_DATE AS hireDate,
		    CONTACT_NUMBER AS contactNumber,
		    EMAIL AS email,
		    DIVISION_NAME AS divisionName,
		    POSITION_NAME AS positionName,
		    MANAGER.EMPLOYEE_NAME AS managerName,
		    MANAGER.DIVISION_ID AS divisionId,
			TREE_ID AS treeId		    
		FROM EMPLOYEES EMP 
		LEFT JOIN DIVISIONS DIV ON DIV.DIVISION_ID = EMP.DIVISION_ID
		JOIN POSITIONS POS ON POS.POSITION_ID = EMP.POSITION_ID
		LEFT JOIN (
		    SELECT E.EMPLOYEE_ID, E.EMPLOYEE_NAME, MGRDIV.DIVISION_ID AS DIVISION_ID FROM EMPLOYEES E
		    LEFT JOIN DIVISIONS MGRDIV ON MGRDIV.DIVISION_ID = E.DIVISION_ID
		) MANAGER ON MANAGER.EMPLOYEE_ID = EMP.HEAD_ID
		WHERE EMP.EMPLOYEE_ID NOT IN (SELECT EMPLOYEE_ID FROM RESIGN_EMPLOYEES)
		<dynamic prepend="AND">
	        <isEqual property="paramCondition" compareValue="employeeAdd">
				POS.POSITION_LEVEL <![CDATA[ < ]]> #positionLevel#
			</isEqual>
			<isEqual property="paramCondition" compareValue="projectAssigner">
				POS.POSITION_LEVEL <![CDATA[ <= ]]> #positionLevel# AND (EMP.DIVISION_ID = 1 OR EMP.DIVISION_ID IS NULL)
			</isEqual>
			<isEqual property="paramCondition" compareValue="employeeEditPosDiv">
				POS.POSITION_LEVEL <![CDATA[ < ]]> #positionLevel# AND EMP.EMPLOYEE_ID != #employeeId# 
			</isEqual>
			<isEqual property="paramCondition" compareValue="employeeResign">
				POS.POSITION_LEVEL <![CDATA[ <= ]]> #positionLevel# AND EMP.EMPLOYEE_ID != #employeeId#  AND (EMP.DIVISION_ID = $divisionId$ OR EMP.DIVISION_ID IS NULL)
			</isEqual>
		</dynamic>
	    <dynamic prepend="AND">
	        <isNotNull property="columnSearch">
		       	<isEqual property="columnSearch" compareValue="ID">
			          UPPER(EMP.EMPLOYEE_ID) LIKE UPPER(#value#)
				</isEqual>
		       	<isEqual property="columnSearch" compareValue="NAME">
			          UPPER(EMP.EMPLOYEE_NAME) LIKE UPPER('%'||#value#||'%')
				</isEqual> 
				<isEqual property="columnSearch" compareValue="GENDER">
			          UPPER(EMP.GENDER) LIKE #value#
				</isEqual> 
				<isEqual property="columnSearch" compareValue="EMAIL">
			          UPPER(EMP.EMAIL) LIKE UPPER('%'||#value#||'%')
				</isEqual> 
				<isEqual property="columnSearch" compareValue="DIVISION">
			          UPPER(DIVISION_NAME) LIKE UPPER('%'||#value#||'%')
				</isEqual> 
				<isEqual property="columnSearch" compareValue="POSITION">
			          UPPER(POSITION_NAME) LIKE UPPER('%'||#value#||'%')
				</isEqual> 
				<isEqual property="columnSearch" compareValue="MANAGER">
			          UPPER(MANAGER.EMPLOYEE_NAME) LIKE UPPER('%'||#value#||'%')
				</isEqual> 
	        </isNotNull>
	    </dynamic>
	    ORDER BY EMP.EMPLOYEE_ID ASC) page 
	    WHERE ROWNUM <![CDATA[ <= ]]> #endRow#) WHERE rnum <![CDATA[ >= ]]> #startRow#
	</select>
	
	<!-- GET TREE_ID EMPLOYEE -->
	<select id="getTreeIdByEmployeeId" resultClass="java.lang.String" parameterClass="java.lang.Integer">
		SELECT TREE_ID FROM EMPLOYEES 
		WHERE EMPLOYEE_ID = $employeeId$
	</select>
	
	<!-- UPDATE TREE ID WHEN EMPLOYEE RESIGN OR CHANGE DIVISION -->
	<update id="updateTreeId" parameterClass="java.util.Map">
		UPDATE EMPLOYEES SET TREE_ID = REPLACE (TREE_ID,SUBSTR (TREE_ID,0,$length$),#newTreeId#)
		WHERE TREE_ID LIKE #oldTreeId#||'%' AND EMPLOYEE_ID !=$employeeId$ 
	</update>
	
	<!-- SELECT COUNT NATIONAL HOLIDAY BETWEEN DAY OFF -->
	<select id="getListNationalHoliday" resultClass="java.lang.Integer" parameterClass="java.util.Map">
		SELECT COUNT(0) FROM NATIONAL_HOLIDAYS WHERE  HOLIDAY_DATE BETWEEN 
                #startDayOff# AND #endDayOff#
	</select>
	
	
	<!-- select employee by tree -->
	<select id="getListByTree" resultClass="prime.admin.employee.EmployeeBean" parameterClass="java.util.Map">
		SELECT * FROM  (SELECT page.*, ROWNUM rnum FROM 
		(SELECT
			EMP.EMPLOYEE_ID 	  AS employeeId, 
	        EMP.EMPLOYEE_NAME 	  AS employeeName,
	        GENDER 				  AS gender,
	        ADDRESS 			  AS address,
	        BIRTHDATE 			  AS birthdate,
	        CONTACT_NUMBER 		  AS contactNumber,
	        EMAIL 				  AS email,
	        DIVISION_NAME 		  AS divisionName,
	        POSITION_NAME 		  AS positionName,
	        MANAGER.EMPLOYEE_NAME AS managerName
		FROM EMPLOYEES EMP
		LEFT JOIN DIVISIONS DIV ON DIV.DIVISION_ID = EMP.DIVISION_ID
		JOIN POSITIONS POS ON POS.POSITION_ID = EMP.POSITION_ID
		LEFT JOIN (
		    SELECT E.EMPLOYEE_ID, E.EMPLOYEE_NAME, MGRDIV.DIVISION_ID AS DIVISION_ID FROM EMPLOYEES E
		    LEFT JOIN DIVISIONS MGRDIV ON MGRDIV.DIVISION_ID = E.DIVISION_ID
		) MANAGER ON MANAGER.EMPLOYEE_ID = EMP.HEAD_ID
		JOIN (
		    SELECT X.EMPLOYEE_ID, X.TREE_ID
		    FROM EMPLOYEES X
		    WHERE X.EMPLOYEE_ID = #employeeId#
		) EMPX ON EMPX.EMPLOYEE_ID != EMP.EMPLOYEE_ID
		WHERE EMP.EMPLOYEE_ID NOT IN (SELECT EMPLOYEE_ID FROM RESIGN_EMPLOYEES)
		AND EMP.TREE_ID LIKE  EMPX.TREE_ID||'%'
		ORDER BY EMP.EMPLOYEE_ID ASC) page 
	    WHERE ROWNUM <![CDATA[ <= ]]> #endRow#) WHERE rnum <![CDATA[ >= ]]> #startRow#
    </select>
    
	<select id="getCountListByTree" resultClass="java.lang.Integer" parameterClass="java.util.Map">
		SELECT
			COUNT(1)
		FROM EMPLOYEES EMP
		LEFT JOIN DIVISIONS DIV ON DIV.DIVISION_ID = EMP.DIVISION_ID
		JOIN POSITIONS POS ON POS.POSITION_ID = EMP.POSITION_ID
		LEFT JOIN (
		    SELECT E.EMPLOYEE_ID, E.EMPLOYEE_NAME, MGRDIV.DIVISION_ID AS DIVISION_ID FROM EMPLOYEES E
		    LEFT JOIN DIVISIONS MGRDIV ON MGRDIV.DIVISION_ID = E.DIVISION_ID
		) MANAGER ON MANAGER.EMPLOYEE_ID = EMP.HEAD_ID
		JOIN (
		    SELECT X.EMPLOYEE_ID, X.TREE_ID
		    FROM EMPLOYEES X
		    WHERE X.EMPLOYEE_ID = #employeeId#
		) EMPX ON EMPX.EMPLOYEE_ID != EMP.EMPLOYEE_ID
		WHERE EMP.TREE_ID LIKE  EMPX.TREE_ID||'%'
		AND EMP.EMPLOYEE_ID NOT IN (SELECT EMPLOYEE_ID FROM RESIGN_EMPLOYEES)
	</select>
	<!-- end of select employee by tree -->
	
	<select id="getListByColumnEmployeeActive" resultClass="prime.admin.employee.EmployeeBean" parameterClass="java.util.Map">
		SELECT * FROM  (SELECT page.*, ROWNUM rnum FROM 
		(SELECT 
	      EMP.EMPLOYEE_ID AS employeeId, 
	      EMP.EMPLOYEE_NAME AS employeeName,
	      GENDER AS gender,
	      ADDRESS AS address,
	      BIRTHDATE AS birthdate,
	      HIRE_DATE AS hireDate,
	      CONTACT_NUMBER AS contactNumber,
	      EMAIL AS email,
	      DIVISION_NAME AS divisionName,
	      POSITION_NAME AS positionName,
	      MANAGER.EMPLOYEE_NAME AS managerName,
	      RE.RESIGN_DATE AS resignDate
	  FROM EMPLOYEES EMP 
	  LEFT JOIN DIVISIONS DIV ON DIV.DIVISION_ID = EMP.DIVISION_ID
	  JOIN POSITIONS POS ON POS.POSITION_ID = EMP.POSITION_ID
	  LEFT JOIN (
	      SELECT E.EMPLOYEE_ID, E.EMPLOYEE_NAME FROM EMPLOYEES E
	  ) MANAGER ON MANAGER.EMPLOYEE_ID = EMP.HEAD_ID
	  LEFT JOIN (
	      SELECT EMPLOYEE_ID, RESIGN_DATE FROM RESIGN_EMPLOYEES
	  )RE ON RE.EMPLOYEE_ID = EMP.EMPLOYEE_ID
	  WHERE RE.RESIGN_DATE IS NULL
	     <dynamic prepend="AND">
	         <isNotNull property="columnSearch">
		        <isEqual property="columnSearch" compareValue="ID">
		             UPPER(EMP.EMPLOYEE_ID) LIKE UPPER(#value#)
			    </isEqual>
			    <isEqual property="columnSearch" compareValue="NAME">
			             UPPER(EMP.EMPLOYEE_NAME) LIKE UPPER('%'||#value#||'%')
			    </isEqual> 
			    <isEqual property="columnSearch" compareValue="GENDER">
			             UPPER(EMP.GENDER) = #value#
			    </isEqual> 
			    <isEqual property="columnSearch" compareValue="EMAIL">
			             UPPER(EMP.EMAIL) LIKE UPPER('%'||#value#||'%')
			    </isEqual> 
			    <isEqual property="columnSearch" compareValue="DIVISION">
			             UPPER(DIVISION_NAME) LIKE UPPER('%'||#value#||'%')
			    </isEqual> 
			    <isEqual property="columnSearch" compareValue="POSITION">
			             UPPER(POSITION_NAME) LIKE UPPER('%'||#value#||'%')
			    </isEqual> 
			    <isEqual property="columnSearch" compareValue="MANAGER">
			             UPPER(MANAGER.EMPLOYEE_NAME) LIKE UPPER('%'||#value#||'%')
			    </isEqual> 
			    <isEqual property="columnSearch" compareValue="STATUS">
			           (CASE 
				            WHEN NVL(TO_CHAR(RE.RESIGN_DATE, 'yyyy-mm-dd'), '0') = '0' THEN 0
				            ELSE 1
				        END) = #value#
				</isEqual> 
	         </isNotNull>
     </dynamic>
     ORDER BY EMP.EMPLOYEE_ID ASC) page 
     WHERE ROWNUM <![CDATA[ <= ]]> #endRow#) WHERE rnum <![CDATA[ >= ]]> #startRow# 
 	</select>
 
	<select id="getCountByColumnEmployeeActive" resultClass="java.lang.Integer" parameterClass="java.util.Map">
		  SELECT COUNT(1) 
		  FROM EMPLOYEES EMP 
		  LEFT JOIN DIVISIONS DIV ON DIV.DIVISION_ID = EMP.DIVISION_ID
		  JOIN POSITIONS POS ON POS.POSITION_ID = EMP.POSITION_ID
		  LEFT JOIN (
		      SELECT E.EMPLOYEE_ID, E.EMPLOYEE_NAME FROM EMPLOYEES E
		  ) MANAGER ON MANAGER.EMPLOYEE_ID = EMP.HEAD_ID
		  LEFT JOIN ( 
		      SELECT EMPLOYEE_ID, RESIGN_DATE FROM RESIGN_EMPLOYEES
		  )RE ON RE.EMPLOYEE_ID = EMP.EMPLOYEE_ID
		  WHERE RE.RESIGN_DATE IS NULL
	     <dynamic prepend="AND">
	         <isNotNull property="columnSearch">
	          	<isEqual property="columnSearch" compareValue="ID">
	             UPPER(EMP.EMPLOYEE_ID) LIKE UPPER(#value#)
			    </isEqual>
			          <isEqual property="columnSearch" compareValue="NAME">
			             UPPER(EMP.EMPLOYEE_NAME) LIKE UPPER('%'||#value#||'%')
			    </isEqual>
			    <isEqual property="columnSearch" compareValue="GENDER">
			             UPPER(GENDER) = #value#
			    </isEqual> 
			    <isEqual property="columnSearch" compareValue="EMAIL">
			             UPPER(EMAIL) LIKE UPPER('%'||#value#||'%')
			    </isEqual> 
			    <isEqual property="columnSearch" compareValue="DIVISION">
			             UPPER(DIVISION_NAME) LIKE UPPER('%'||#value#||'%')
			    </isEqual> 
			    <isEqual property="columnSearch" compareValue="POSITION">
			             UPPER(POSITION_NAME) LIKE UPPER('%'||#value#||'%')
			    </isEqual> 
			    <isEqual property="columnSearch" compareValue="MANAGER">
			             UPPER(MANAGER.EMPLOYEE_NAME) LIKE UPPER('%'||#value#||'%')
			    </isEqual>
			    <isEqual property="columnSearch" compareValue="STATUS">
			           (CASE 
				            WHEN NVL(TO_CHAR(RE.RESIGN_DATE, 'yyyy-mm-dd'), '0') = '0' THEN 0
				            ELSE 1
				        END) = #value#
				</isEqual> 
	         </isNotNull>
	     </dynamic>
	 </select>
	 
	 <select id="getEmployeeResignDate" resultClass="java.sql.Date" parameterClass="java.lang.Integer">
		  SELECT RE.RESIGN_DATE
		  FROM EMPLOYEES EMP 
		  LEFT JOIN ( 
		      SELECT EMPLOYEE_ID, RESIGN_DATE FROM RESIGN_EMPLOYEES
		  )RE ON RE.EMPLOYEE_ID = EMP.EMPLOYEE_ID
		  WHERE EMP.EMPLOYEE_ID=#employeeId#
	 </select>
	 
	 <select id="getCountUnderLevel" resultClass="java.lang.Integer" parameterClass="java.lang.Integer" >
		SELECT COUNT(1)
        FROM EMPLOYEES E 
        JOIN POSITIONS POS ON E.POSITION_ID=POS.POSITION_ID
        WHERE TREE_ID LIKE 
            (SELECT TREE_ID FROM EMPLOYEES WHERE EMPLOYEE_ID= #employeeId#)||'%' AND EMPLOYEE_ID != 110
                 AND POSITION_LEVEL > (
                    SELECT POSITION_LEVEL 
                    FROM EMPLOYEES EMP
                    JOIN POSITIONS P ON EMP.POSITION_ID = P.POSITION_ID
                    WHERE EMPLOYEE_ID= #employeeId#
                )+1
	 </select>
	 
	 <select id="getListTreeforMember" resultClass="prime.admin.employee.EmployeeBean" parameterClass="java.util.Map">
	 SELECT * FROM  (SELECT page.*, ROWNUM rnum FROM 
		(SELECT
			EMP.EMPLOYEE_ID 	  AS employeeId, 
	        EMP.EMPLOYEE_NAME 	  AS employeeName,
	        GENDER 				  AS gender,
	        ADDRESS 			  AS address,
	        BIRTHDATE 			  AS birthdate,
	        CONTACT_NUMBER 		  AS contactNumber,
	        EMAIL 				  AS email,
	        DIVISION_NAME 		  AS divisionName,
	        POSITION_NAME 		  AS positionName,
	        MANAGER.EMPLOYEE_NAME AS managerName
		FROM EMPLOYEES EMP
		LEFT JOIN DIVISIONS DIV ON DIV.DIVISION_ID = EMP.DIVISION_ID
		JOIN POSITIONS POS ON POS.POSITION_ID = EMP.POSITION_ID
		LEFT JOIN (
		    SELECT E.EMPLOYEE_ID, E.EMPLOYEE_NAME, MGRDIV.DIVISION_ID AS DIVISION_ID FROM EMPLOYEES E
		    LEFT JOIN DIVISIONS MGRDIV ON MGRDIV.DIVISION_ID = E.DIVISION_ID
		) MANAGER ON MANAGER.EMPLOYEE_ID = EMP.HEAD_ID
		JOIN (
		    SELECT X.EMPLOYEE_ID, X.TREE_ID
		    FROM EMPLOYEES X
		    WHERE X.EMPLOYEE_ID = #employeeId#
		) EMPX ON EMPX.EMPLOYEE_ID != EMP.EMPLOYEE_ID
		WHERE EMP.EMPLOYEE_ID NOT IN (SELECT EMPLOYEE_ID FROM RESIGN_EMPLOYEES)
		AND EMP.TREE_ID LIKE  EMPX.TREE_ID||'%' AND EMP.EMPLOYEE_ID NOT IN (SELECT EMPLOYEE_ID FROM PROJECT_MEMBERS WHERE  PROJECT_ID=#projectId#)
		ORDER BY EMP.EMPLOYEE_ID ASC) page 
	    WHERE ROWNUM <![CDATA[ <= ]]> #endRow#) WHERE rnum <![CDATA[ >= ]]> #startRow#
	 </select>
	 
	 <select id="getCountListByTreeforMember" resultClass="java.lang.Integer" parameterClass="java.util.Map">
		SELECT
			COUNT(1)
		FROM EMPLOYEES EMP
		LEFT JOIN DIVISIONS DIV ON DIV.DIVISION_ID = EMP.DIVISION_ID
		JOIN POSITIONS POS ON POS.POSITION_ID = EMP.POSITION_ID
		LEFT JOIN (
		    SELECT E.EMPLOYEE_ID, E.EMPLOYEE_NAME, MGRDIV.DIVISION_ID AS DIVISION_ID FROM EMPLOYEES E
		    LEFT JOIN DIVISIONS MGRDIV ON MGRDIV.DIVISION_ID = E.DIVISION_ID
		) MANAGER ON MANAGER.EMPLOYEE_ID = EMP.HEAD_ID
		JOIN (
		    SELECT X.EMPLOYEE_ID, X.TREE_ID
		    FROM EMPLOYEES X
		    WHERE X.EMPLOYEE_ID = #employeeId#
		) EMPX ON EMPX.EMPLOYEE_ID != EMP.EMPLOYEE_ID
		WHERE EMP.TREE_ID LIKE  EMPX.TREE_ID||'%' AND EMP.EMPLOYEE_ID NOT IN (SELECT EMPLOYEE_ID FROM PROJECT_MEMBERS WHERE  PROJECT_ID=#projectId#)
		AND EMP.EMPLOYEE_ID NOT IN (SELECT EMPLOYEE_ID FROM RESIGN_EMPLOYEES)
	</select>
</sqlMap>
