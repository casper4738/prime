<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL MAP 2.0//EN"
"http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="employee">
	<insert id="insert" parameterClass="prime.admin.employee.EmployeeBean">
		INSERT INTO EMPLOYEES
		(EMPLOYEE_ID , EMPLOYEE_NAME, ADDRESS, CONTACT_NUMBER, EMAIL,
		 BIRTHDATE, GENDER, HIRE_DATE, DIVISION_ID, POSITION_ID,
		 HEAD_ID) VALUES 
		(#employeeId#, #employeeName#, #address#, #contactNumber#, #email#, TO_DATE(#birthdate#,'dd/mm/yyyy'), 
		 #gender#, TO_DATE(#hireDate#,'dd/mm/yyyy'), #divisionId#, #positionId#, #managerId#)
	</insert>
	
	<update id="update" parameterClass="prime.admin.employee.EmployeeBean">
		UPDATE EMPLOYEES SET
		EMPLOYEE_NAME=#employeeName#,
		ADDRESS=#address#,
		CONTACT_NUMBER=#contactNumber#,
		EMAIL=#email#,
		BIRTHDATE=#birthdate#,
		GENDER=#gender#,
		HIRE_DATE=#hireDate#,
		<!-- EMPLOYEE_LEVEL=#employeeLevel#, -->
		DIVISION_ID=#divisionId#,
		POSITION_ID=#positionId#,
		<isNotEqual property="managerId"  compareValue="0">
			HEAD_ID=#managerId#
		</isNotEqual>
		<isEqual property="managerId"  compareValue="0">
			HEAD_ID=null
		</isEqual>
		WHERE EMPLOYEE_ID=#employeeId#
	</update>
	
	<select id="getNewId" resultClass="java.lang.Integer">
		SELECT NVL(MAX(EMPLOYEE_ID)+1, 1) FROM EMPLOYEES
	</select>
	
	<select id="get"  resultClass="prime.admin.employee.EmployeeBean" parameterClass="java.lang.Integer">
		SELECT 
        EMP.EMPLOYEE_ID AS employeeId, 
        EMP.EMPLOYEE_NAME AS employeeName,
        GENDER AS gender,
        ADDRESS AS address,
        BIRTHDATE AS birthdate,
        HIRE_DATE AS hireDate,
        CONTACT_NUMBER AS contactNumber,
        EMAIL AS email,
        DIV.DIVISION_ID AS divisionId,
        DIV.DIVISION_NAME AS divisionName,
        POS.POSITION_ID AS positionId,
        POS.POSITION_NAME AS positionName,
        MANAGER.EMPLOYEE_ID AS managerId,
        MANAGER.EMPLOYEE_NAME AS managerName
        FROM EMPLOYEES EMP 
        INNER JOIN DIVISIONS DIV ON DIV.DIVISION_ID = EMP.DIVISION_ID
        INNER JOIN POSITIONS POS ON POS.POSITION_ID = EMP.POSITION_ID
        LEFT JOIN (SELECT EMPLOYEE_ID, EMPLOYEE_NAME FROM EMPLOYEES) MANAGER ON MANAGER.EMPLOYEE_ID = EMP.HEAD_ID
        WHERE EMP.EMPLOYEE_ID=#id#
	</select>
	
	<select id="getListByColumn" resultClass="prime.admin.employee.EmployeeBean" parameterClass="java.util.Map">
		SELECT * FROM  (SELECT page.*, ROWNUM rnum FROM 
		(SELECT 
		    EMP.EMPLOYEE_ID AS employeeId, 
		    EMP.EMPLOYEE_NAME AS employeeName,
		    GENDER AS gender,
		    ADDRESS AS address,
		    BIRTHDATE AS birthdate,
		    HIRE_DATE AS hireDate,
		    CONTACT_NUMBER AS contactNumber,
		    EMAIL AS email,
		    DIVISION_NAME AS divisionName,
		    POSITION_NAME AS positionName,
		    MANAGER.EMPLOYEE_NAME AS managerName
		FROM EMPLOYEES EMP 
		JOIN DIVISIONS DIV ON DIV.DIVISION_ID = EMP.DIVISION_ID
		JOIN POSITIONS POS ON POS.POSITION_ID = EMP.POSITION_ID
		LEFT JOIN (
		    SELECT E.EMPLOYEE_ID, E.EMPLOYEE_NAME FROM EMPLOYEES E
		) MANAGER ON MANAGER.EMPLOYEE_ID = EMP.HEAD_ID
	    <dynamic prepend="WHERE">
	        <isNotNull property="columnSearch">
		       	<isEqual property="columnSearch" compareValue="NAME">
			          UPPER(EMP.EMPLOYEE_NAME) LIKE UPPER('%'||#value#||'%')
				</isEqual> 
	        </isNotNull>
	    </dynamic>
	    ORDER BY EMP.EMPLOYEE_ID ASC) page 
	    WHERE ROWNUM <![CDATA[ <= ]]> #endRow#) WHERE rnum <![CDATA[ >= ]]> #startRow#
	</select>
	
	<select id="getCountByColumn" resultClass="java.lang.Integer" parameterClass="java.util.Map">
		SELECT COUNT(1) 
		FROM EMPLOYEES 
	    <dynamic prepend="WHERE">
	        <isNotNull property="columnSearch">
		       	<isEqual property="columnSearch" compareValue="NAME">
			          UPPER(EMPLOYEE_NAME) LIKE UPPER('%'||#value#||'%')
				</isEqual> 
	        </isNotNull>
	    </dynamic>
	</select>
	
	<select id="getListByColumnAndDivision" resultClass="prime.admin.employee.EmployeeBean" parameterClass="java.util.Map">
		SELECT * FROM  (SELECT page.*, ROWNUM rnum FROM 
		(SELECT 
        EMP.EMPLOYEE_ID AS employeeId, 
        EMP.EMPLOYEE_NAME AS employeeName,
        GENDER AS gender,
        ADDRESS AS address,
        BIRTHDATE AS birthdate,
        CONTACT_NUMBER AS contactNumber,
        EMAIL AS email,
        DIVISION_NAME AS divisionName,
        POSITION_NAME AS positionName,
        <!-- EMPLOYEE_LEVEL AS employeeLevel, -->
        MANAGER.EMPLOYEE_NAME AS managerName
        FROM EMPLOYEES EMP 
        INNER JOIN DIVISIONS DIV ON DIV.DIVISION_ID = EMP.DIVISION_ID
        INNER JOIN POSITIONS POS ON POS.POSITION_ID = EMP.POSITION_ID
        LEFT JOIN (SELECT EMPLOYEE_ID, EMPLOYEE_NAME FROM EMPLOYEES) MANAGER ON MANAGER.EMPLOYEE_ID = EMP.HEAD_ID
		WHERE 1=1 AND  DIV.DIVISION_ID = #divisionId#  
		<dynamic prepend="AND">
	        <isNotNull property="columnSearch">
		       	<isEqual property="columnSearch" compareValue="NAME">
					UPPER(EMPLOYEE_NAME) LIKE UPPER('%'||#value#||'%')
				</isEqual> 
	        </isNotNull>
	    </dynamic>
	    ORDER BY EMP.EMPLOYEE_ID ASC) page 
	    WHERE ROWNUM <![CDATA[ <= ]]> #endRow#) WHERE rnum <![CDATA[ >= ]]> #startRow#
	</select>
	
	<select id="getCountByColumnAndDivision" resultClass="java.lang.Integer" parameterClass="java.util.Map">
		SELECT COUNT(1) 
		FROM EMPLOYEES EMP 
        INNER JOIN DIVISIONS DIV ON DIV.DIVISION_ID = EMP.DIVISION_ID
        INNER JOIN POSITIONS POS ON POS.POSITION_ID = EMP.POSITION_ID
        LEFT JOIN (SELECT EMPLOYEE_ID, EMPLOYEE_NAME FROM EMPLOYEES) MANAGER ON MANAGER.EMPLOYEE_ID = EMP.HEAD_ID
        WHERE  1=1 AND DIV.DIVISION_ID = #divisionId# 
	    <dynamic prepend="AND">
	        <isNotNull property="columnSearch">
		       	<isEqual property="columnSearch" compareValue="NAME">
			         UPPER(EMPLOYEE_NAME) LIKE UPPER('%'||#value#||'%')
				</isEqual> 
	        </isNotNull>
	    </dynamic>
	</select>
	
	<select id="getListEmployeeHead" resultClass="prime.admin.employee.EmployeeBean" parameterClass="java.util.Map">
		SELECT * FROM  (SELECT page.*, ROWNUM rnum FROM 
		(SELECT 
		    EMP.EMPLOYEE_ID AS employeeId, 
		    EMP.EMPLOYEE_NAME AS employeeName,
		    GENDER AS gender,
		    ADDRESS AS address,
		    BIRTHDATE AS birthdate,
		    HIRE_DATE AS hireDate,
		    CONTACT_NUMBER AS contactNumber,
		    EMAIL AS email,
		    DIVISION_NAME AS divisionName,
		    POSITION_NAME AS positionName,
		    MANAGER.EMPLOYEE_NAME AS managerName,
		    MANAGER.DIVISION_ID AS divisionId
		FROM EMPLOYEES EMP 
		JOIN DIVISIONS DIV ON DIV.DIVISION_ID = EMP.DIVISION_ID
		JOIN POSITIONS POS ON POS.POSITION_ID = EMP.POSITION_ID
		LEFT JOIN (
		    SELECT E.EMPLOYEE_ID, E.EMPLOYEE_NAME, MGRDIV.DIVISION_ID AS DIVISION_ID FROM EMPLOYEES E
		    JOIN DIVISIONS MGRDIV ON MGRDIV.DIVISION_ID = E.DIVISION_ID
		) MANAGER ON MANAGER.EMPLOYEE_ID = EMP.HEAD_ID
		WHERE POS.POSITION_LEVEL <![CDATA[ < ]]> #positionLevel#
	    <dynamic prepend="AND">
	        <isNotNull property="columnSearch">
		       	<isEqual property="columnSearch" compareValue="NAME">
			          UPPER(EMP.EMPLOYEE_NAME) LIKE UPPER('%'||#value#||'%')
				</isEqual> 
	        </isNotNull>
	    </dynamic>
	    ORDER BY EMP.EMPLOYEE_ID ASC) page 
	    WHERE ROWNUM <![CDATA[ <= ]]> #endRow#) WHERE rnum <![CDATA[ >= ]]> #startRow#
	</select>
</sqlMap>